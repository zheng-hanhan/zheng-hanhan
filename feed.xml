<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Zhenghanhan Blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-09-20T15:38:45+08:00</updated> <author> <name>zjh</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 zjh </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>garbage collection</title><link href="/posts/garbage-collection/" rel="alternate" type="text/html" title="garbage collection" /><published>2021-07-25T18:37:00+08:00</published> <updated>2021-07-25T18:37:00+08:00</updated> <id>/posts/garbage-collection/</id> <content src="/posts/garbage-collection/" /> <author> <name>zjh</name> </author> <summary> https://learning.oreilly.com/library/view/the-garbage-collection/9781315388007/xhtml/08_ListofAlg.xhtml https://plumbr.io/handbook/garbage-collection-algorithms-implementations </summary> </entry> <entry><title>编译器优化相关文章阅读注解</title><link href="/posts/general-concept-for-compiler-opt/" rel="alternate" type="text/html" title="编译器优化相关文章阅读注解" /><published>2021-07-18T00:00:00+08:00</published> <updated>2021-07-18T00:00:00+08:00</updated> <id>/posts/general-concept-for-compiler-opt/</id> <content src="/posts/general-concept-for-compiler-opt/" /> <author> <name>zjh</name> </author> <category term="compiler optimisation" /> <summary> 引言 搜索了一些关于编译器优化的一些文章，对其中一些观点进行了摘抄和注解 XL Fortran for Blue Gene/Q 14.1.0 Distinguishing between optimization and tuning 这里主要介绍了优化和调优这两个概念的区别 针对优化，文中提及： Optimization is a compiler driven process that searches for opportunities to restructure your source code and give your application better overall performance at run time, without significantly impacting development time. Each basic op... </summary> </entry> <entry><title>Dynamic Programming</title><link href="/posts/algorithms-dynamic-programming/" rel="alternate" type="text/html" title="Dynamic Programming" /><published>2021-06-20T00:00:00+08:00</published> <updated>2020-06-20T00:00:00+08:00</updated> <id>/posts/algorithms-dynamic-programming/</id> <content src="/posts/algorithms-dynamic-programming/" /> <author> <name>zjh</name> </author> <category term="algorithm" /> <summary> 引言 之前我推荐过两本算法书，现在再次翻阅回味，有了想写笔记的想法。 本篇以其中的这本书Algorithms by Jeff Erickson的第三章为基础， 写一些笔记。 本章一开始作者从介绍音乐相关的背景知识展开叙述。所以为了能够看懂这段话，我特地补了补音乐方面的名词，可以参考这篇博文。 音乐小知识 Music is made up of notes of different lengths (that’s how we have rhythm), and we measure the length of notes in beats. 音乐由不同长度的notes组成，而note的长度以节拍(beat)为单位来衡量。 beat:表示节拍。 Bar or Measure (They’re the same thing!)： Time Signature： Tempo:表... </summary> </entry> <entry><title>通过例子查看编译器编译流程</title><link href="/2020-12-06-simple-example.html" rel="alternate" type="text/html" title="通过例子查看编译器编译流程" /><published>2020-12-06T00:00:00+08:00</published> <updated>2020-12-06T00:00:00+08:00</updated> <id>/2020-12-06-simple-example.html</id> <content src="/2020-12-06-simple-example.html" /> <author> <name>zjh</name> </author> <summary>通过例子查看编译器编译流程</summary> </entry> <entry><title>加载libart.so步骤</title><link href="/2020-09-07-libart-so.html" rel="alternate" type="text/html" title="加载libart.so步骤" /><published>2020-09-07T00:00:00+08:00</published> <updated>2020-09-07T00:00:00+08:00</updated> <id>/2020-09-07-libart-so.html</id> <content src="/2020-09-07-libart-so.html" /> <author> <name>zjh</name> </author> <summary>本文列举了app_process加载虚拟机的代码</summary> </entry> </feed>
